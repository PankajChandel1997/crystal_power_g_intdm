// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Domain.Entities.ControlEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ControlEvent");
                });

            modelBuilder.Entity("Domain.Entities.CurrentRelatedEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("BPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIb")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIr")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIy")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("KVAHExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("KVAHImportForwarded")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("NeutralCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("RPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorBPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorRPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorYPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Temperature")
                        .HasColumnType("TEXT");

                    b.Property<string>("TotalPF")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVbn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVrn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVyn")
                        .HasColumnType("TEXT");

                    b.Property<string>("YPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CurrentRelatedEvent");
                });

            modelBuilder.Entity("Domain.Entities.DIEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DIEvent");
                });

            modelBuilder.Entity("Domain.Entities.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("CTRatio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumerAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumerNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("KvahEnergyDefinition")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoadSurveyIntegrationPeriod")
                        .HasColumnType("TEXT");

                    b.Property<string>("MDIntegrationPeriod")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManSpecificFirmwareVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterConstant")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<short>("MeterType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeterVoltageRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterYearManufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("NICFirmwareVersionNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PTRatio")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Meter");
                });

            modelBuilder.Entity("Domain.Entities.MeterFetchDataLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MeterFetchDataLog");
                });

            modelBuilder.Entity("Domain.Entities.NonRolloverEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NonRolloverEvent");
                });

            modelBuilder.Entity("Domain.Entities.OtherEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("BPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIb")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIr")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIy")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("KVAHExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("KVAHImportForwarded")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("NeutralCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("RPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorBPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorRPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorYPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Temperature")
                        .HasColumnType("TEXT");

                    b.Property<string>("TotalPF")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVbn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVrn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVyn")
                        .HasColumnType("TEXT");

                    b.Property<string>("YPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OtherEvent");
                });

            modelBuilder.Entity("Domain.Entities.PowerRelatedEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PowerRelatedEvent");
                });

            modelBuilder.Entity("Domain.Entities.SelfDiagnostic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SelfDiagnostic");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.BillingProfileSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("AveragePowerFactor")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingPowerONdurationinMinutes")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ8")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ8")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MaximumDemandkVA")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVADateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BillingProfileSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.BlockLoadProfileSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("AverageVoltage")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykVAh")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterHealthIndicator")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("NeutralCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhaseCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockLoadProfileSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.ControlEventSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ControlEventSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.CurrentRelatedEventSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWh")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Current")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateAndTimeOfEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactor")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Voltage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CurrentRelatedEventSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.DIEventSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DIEventSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.DailyLoadProfileSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergyKVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DailyLoadProfileSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.ESWSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EarthLoading")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FirstBreath")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncrementInBillingCounterMRI")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InfluenceOfPermanetMagnetOorAcDc")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<bool>("LastGasp")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LowVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MeterCoverOpen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MeterLoadDisconnectConnected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeutralDisturbance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OverCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OverVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("VerylowPF")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ESWSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.EventProfileSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergyKwhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergyKwhImprot")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Current")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateAndTimeOfEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactor")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Voltage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventProfileSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.InstantaneousProfileSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("ActivePowerkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApparentPowerKVA")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cumulativebillingcount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeenergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeenergykVAhimport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeenergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeenergykWhimport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativepowerONdurationinminute")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cumulativeprogrammingcount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cumulativetampercount")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyHz")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("Loadlimitfunctionstatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoadlimitvalueinkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxumumDemandkVA")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxumumDemandkVAdateandtime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxumumDemandkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxumumDemandkWdateandtime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("NeutralCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhaseCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Realtimeclock")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactor")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Voltage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("InstantaneousProfileSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.NonRolloverEventSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NonRolloverEventSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.OtherEventSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Current")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateandTimeofEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactor")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Voltage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OtherEventSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.PowerRelatedEventSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PowerRelatedEventSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.TransactionEventSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionEventSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.SinglePhaseEntities.VoltageRelatedEventSinglePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWh")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Current")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateandTimeofEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactor")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Voltage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VoltageRelatedEventSinglePhase");
                });

            modelBuilder.Entity("Domain.Entities.TOD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("ActiveCalenderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActiveDayProfileScript")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActiveDayProfileSelector")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActiveDayProfileStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassiveCalenderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassiveDayProfileScript")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassiveDayProfileSelector")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassiveDayProfileStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TOD");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseCTEntities.BillingProfileThreePhaseCT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("AveragePFForBillingPeriod")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingPowerONdurationInMinutesDBP")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingResetType")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeBillingCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ8")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWh")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ8")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeMdKvaImportForwarded")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeMdKwImportForwarded")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("FundamentalEnergy")
                        .HasColumnType("TEXT");

                    b.Property<string>("FundamentalEnergyExport")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MaximumDemandkVA")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVADateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ1DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ2DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ3DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ4DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ5DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ6DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ7DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ8")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ8DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ1DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ2DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ3DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ4DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ5DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ6DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ7DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ8")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ8DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKvaExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKvaExportWithDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKwExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKwExportWithDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKwImportDateTimeTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFailCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerOffDuration")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<string>("TamperCount")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BillingProfileThreePhaseCT");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseCTEntities.BlockLoadProfileThreePhaseCT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("BlockEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykvarhQI")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykvarhQII")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykvarhQIII")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykvarhQIV")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentB")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentR")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentY")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterHealthIndicator")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageB")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageR")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageY")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockLoadProfileThreePhaseCT");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseCTEntities.DailyLoadProfileThreePhaseCT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DailyLoadProfileThreePhaseCT");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseCTEntities.EventProfileThreePhaseCT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentB")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentR")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentY")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateAndTimeOfEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorBPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorRPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorYPhase")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageB")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageR")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageY")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventProfileThreePhaseCT");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseCTEntities.InstantaneousProfileThreePhaseCT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("AngleRbPhaseVoltage")
                        .HasColumnType("TEXT");

                    b.Property<string>("AngleRyPhaseVoltage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApparentPowerKVA")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingDateImportMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingPeriodCounter")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativePowerOFFDurationInMin")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativePowerOndurationMin")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeProgrammingCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentB")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentR")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentY")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyHz")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("LoadLimitFunctionStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVA")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVADateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKvaExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKvaExportDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKwExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("MdKwExportDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("NeutralCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("NicCellIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("NicSignalPower")
                        .HasColumnType("TEXT");

                    b.Property<string>("NicSignalToNoiseRatio")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberOfPowerFailures")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhaseSequence")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedActivePowerkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorBPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorRPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorYPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedReactivePowerkvar")
                        .HasColumnType("TEXT");

                    b.Property<string>("Temperature")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreePhasePowerFactorPF")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageB")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageR")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageY")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("InstantaneousProfileThreePhaseCT");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseEntities.BillingProfileThreePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("BillingPowerONdurationInMinutesDBP")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhTZ8")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWh")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhTZ8")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MaximumDemandkVA")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVADateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ1DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ2DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ3DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ4DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ5DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ6DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ7DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ8")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVAForTZ8DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ1DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ2DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ3DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ4DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ5")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ5DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ6")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ6DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ7")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ7DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ8")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWForTZ8DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemPowerFactorImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("TamperCount")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BillingProfileThreePhase");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseEntities.BlockLoadProfileThreePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("BlockEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentB")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentR")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentY")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImportAvgPF")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterHealthIndicator")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorBPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorRPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorYPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageB")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageR")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageY")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockLoadProfileThreePhase");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseEntities.DailyLoadProfileThreePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClock")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DailyLoadProfileThreePhase");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseEntities.ESWThreePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<bool>("BPhaseCurrentReverse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BPhaseVoltageMissing")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CurrentBypass")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CurrentUnbalance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FirstBreath")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncrementInBillingCounterMRI")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InfluenceOfPermanetMagnetOorAcDc")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<bool>("LastGasp")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LowVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MeterCoverOpen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MeterLoadDisconnectConnected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeutralDisturbance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OverCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OverVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RPhaseCurrentReverse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RPhaseVoltageMissing")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("VerylowPF")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VoltagUnbalance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("YPhaseCurrentReverse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("YPhaseVoltageMissing")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ESWThreePhase");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseEntities.EventProfileThreePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentB")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentR")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentY")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateAndTimeOfEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorBPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorRPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFactorYPhase")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageB")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageR")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageY")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventProfileThreePhase");
                });

            modelBuilder.Entity("Domain.Entities.ThreePhaseEntities.InstantaneousProfileThreePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("ApparentPowerKVA")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingDateImportMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingPeriodCounter")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVAhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykVArhQ4")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativePowerOFFDurationInMin")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeProgrammingCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentB")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentR")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentY")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyHz")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("LoadLimitFunctionStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoadLimitThresholdkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVA")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkVADateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumDemandkWDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberOfPowerFailures")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedActivePowerkW")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorBPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorRPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorYPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedReactivePowerkvar")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreePhasePowerFactoRF")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageB")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageR")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageY")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("InstantaneousProfileThreePhase");
                });

            modelBuilder.Entity("Domain.Entities.TransactionEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionEvent");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entities.VoltageRelatedEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("BPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeEnergykWhImport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CumulativeTamperCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIb")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIr")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentIy")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericEventLogSequenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("KVAHExport")
                        .HasColumnType("TEXT");

                    b.Property<string>("KVAHImportForwarded")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("NeutralCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("RPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealTimeClockDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorBPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorRPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedPowerFactorYPhase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Temperature")
                        .HasColumnType("TEXT");

                    b.Property<string>("TotalPF")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVbn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVrn")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoltageVyn")
                        .HasColumnType("TEXT");

                    b.Property<string>("YPhaseActiveCurrent")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VoltageRelatedEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
